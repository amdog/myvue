{"id":"index.html","dependencies":[],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"cn\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Vue,Vue</title>\r\n</head>\r\n\r\n<body>\r\n    <div id=\"app\">\r\n        <span>姓名：{{info.name}}</span>\r\n        <span>年龄：{{info.age}}</span>\r\n        <span>宠物：{{info.pet}}</span>\r\n        <span>住址：{{info.addr}}</span>\r\n        <br>\r\n        <span>妻子：{{wife}}</span>\r\n    </div>\r\n    <script>function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Vue(options) {\n  this._init(options);\n\n  return;\n}\n\nVue.prototype._init = function (ops) {\n  this.$options = ops;\n  initstate(this);\n\n  if (ops.ele) {\n    this.$mount(ops);\n  }\n};\n\nfunction query(el) {\n  if (typeof el == 'string') {\n    return document.querySelector(el);\n  } else {\n    return {};\n  }\n}\n\nVue.prototype.$mount = function (ops) {\n  var vm = this;\n  this.$el = query(ops.ele);\n  new Watcher(this, function () {\n    vm._update();\n  });\n};\n\nVue.prototype._update = function () {\n  var node = document.createDocumentFragment();\n  var firstChild;\n  var ele = this.$el;\n\n  while (firstChild = ele.firstChild) {\n    node.appendChild(firstChild);\n  }\n\n  compiler(node, this); // 此时已经 ele 已经没有子元素了\n\n  ele.appendChild(node);\n};\n\nfunction compiler(node, vm) {\n  var childNodes = node.childNodes;\n\n  _toConsumableArray(childNodes).forEach(function (e) {\n    if (e.nodeType === 1) {\n      compiler(e, vm);\n    } else if (e.nodeType === 3) {\n      compilertext(vm, e);\n    }\n  });\n}\n\nvar WATCHER;\nvar DEPID = 0;\nvar WATCHERID = 0;\n\nVue.prototype.$watch = function (key, handler) {\n  new Watcher(this, key, handler, {\n    user: true\n  });\n};\n\nfunction Watcher(vm, updatefun, cb, ops) {\n  this.id = WATCHERID++;\n  this.deps = [];\n  this.depsId = new Set();\n\n  if (typeof updatefun == 'function') {\n    this.run = updatefun;\n\n    this._update = function () {\n      queuewatcher(this);\n    };\n  } else {\n    var old = getv(vm, \"return vm.\".concat(updatefun));\n\n    this.run = function () {\n      vm._update();\n    };\n\n    this._update = function () {\n      queuewatcher(this);\n\n      if (cb) {\n        var newv = getv(vm, \"return vm.\".concat(updatefun));\n\n        if (newv !== old) {\n          cb(old, newv);\n        }\n      }\n    };\n  }\n\n  WATCHER = this;\n\n  this._update();\n}\n\nvar HAS = {};\nvar QUEUE = [];\n\nfunction flusqueue() {\n  QUEUE.forEach(function (v) {\n    v.run();\n  });\n  HAS = {};\n  QUEUE = [];\n}\n\nfunction queuewatcher(watcher) {\n  if (!HAS[watcher.id]) {\n    HAS[watcher.id] = true;\n    QUEUE.push(watcher);\n  }\n\n  nexttrik(flusqueue);\n}\n\nfunction nexttrik(flusqueue) {\n  Promise.resolve().then(flusqueue);\n}\n\nWatcher.prototype.adddep = function (dep) {\n  if (!this.depsId.has(dep.id)) {\n    this.depsId.add(dep.id);\n    this.deps.push(dep);\n  }\n};\n\nfunction Dep() {\n  this.id = DEPID++;\n  this.subs = [];\n}\n\nDep.prototype.addsub = function (watcher) {\n  this.subs.push(watcher);\n};\n\nDep.prototype.depend = function () {\n  this.addsub(WATCHER);\n  WATCHER.adddep(this);\n};\n\nDep.prototype.notify = function () {\n  this.subs.forEach(function (v) {\n    v._update();\n  });\n  return;\n};\n\nfunction getv(vm, fnContent) {\n  var getv_ = new Function('vm', fnContent);\n  return getv_(vm);\n}\n\nfunction compilertext(vm, e) {\n  if (!e.expr) {\n    e.expr = e.textContent;\n  }\n\n  var rexp = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g;\n  e.textContent = e.expr.replace(rexp, function () {\n    var v = getv(vm, \"return vm.\".concat(arguments.length <= 1 ? undefined : arguments[1]));\n    return v;\n  });\n}\n\nfunction initstate(vm) {\n  var opts = vm.$options;\n\n  if (opts.data) {\n    initdata(vm);\n  }\n\n  if (opts.computed) {\n    initcomputed();\n  }\n\n  if (opts.watch) {\n    initwatch(vm);\n  }\n}\n\nfunction initwatch(vm) {\n  for (var key in vm.$options.watch) {\n    vm.$watch(key, vm.$options.watch[key]);\n  }\n}\n\nfunction initcomputed() {}\n\nfunction initdata(vm) {\n  var data = vm.$options.data;\n\n  if (typeof data == 'function') {\n    //data里面的this指向vm实例 this.xxx=xx\n    vm._data = data.call(vm);\n  } else {\n    vm._data = data || {};\n  }\n\n  for (var k in vm._data) {\n    proxy(vm, '_data', k);\n  }\n\n  observe(vm._data);\n}\n\nfunction proxy(vm, source, k) {\n  Object.defineProperty(vm, k, {\n    set: function set(newv) {\n      return vm[source][k] = newv;\n    },\n    get: function get() {\n      return vm[source][k];\n    }\n  });\n}\n\nfunction observe(data) {\n  if (_typeof(data) !== 'object' || data == null) {\n    return;\n  }\n\n  if (data.__ob__) {\n    return data;\n  }\n\n  return new Observer(data);\n}\n\nfunction Observer(data) {\n  var _this = this;\n\n  this.dep = new Dep();\n  var keys = Object.keys(data);\n  Object.defineProperty(data, '__ob__', {\n    get: function get() {\n      return _this;\n    }\n  });\n\n  if (Array.isArray(data)) {\n    data.__proto__ = arrayMethods;\n    observearray(data);\n  }\n\n  keys.forEach(function (v) {\n    reactive(data, v, data[v]);\n  });\n}\n\nfunction dependarray(value) {\n  for (var i = 0; i < value.length; i++) {\n    var item = value[i];\n    item.__ob__ && item.__ob__.dep.depend();\n\n    if (Array.isArray(item)) {\n      dependarray();\n    }\n  }\n}\n\nfunction reactive(d, k, v) {\n  var ob = observe(v);\n  var dep = new Dep(); //Object.defineProperty(倾听的数据，倾听的键，配置{get,set})\n\n  Object.defineProperty(d, k, {\n    get: function get() {\n      if (WATCHER) {\n        dep.depend();\n\n        if (ob) {\n          ob.dep.depend();\n          dependarray(v);\n        }\n      }\n\n      return v;\n    },\n    set: function set(newv) {\n      if (newv === v) {\n        return;\n      }\n\n      v = newv;\n      observe(newv);\n      dep.notify();\n    }\n  });\n}\n\nfunction observearray(args) {\n  args.forEach(function (v) {\n    observe(v);\n  });\n} //数组拦截\n\n\nvar oldMethods = Array.prototype;\nvar arrayMethods = Object.create(oldMethods);\nvar methods = ['pop', 'push', 'shift', 'unshift', 'sort', 'splice', 'reverse'];\nmethods.forEach(function (method) {\n  arrayMethods[method] = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (args.length > 0) {\n      observearray(args);\n    }\n\n    var result = oldMethods[method].apply(this, args);\n\n    this.__ob__.dep.notify();\n\n    return result;\n  };\n});\nvar app = new Vue({\n  ele: '#app',\n  data: function data() {\n    return {\n      info: {\n        name: '张三',\n        age: 0,\n        pet: ['dog', 'cat', 'tager'],\n        addr: '云南省xx市xx县'\n      },\n      wife: '李四'\n    };\n  },\n  watch: {\n    wife: function wife(newv, oldv) {\n      console.log(newv, oldv, 'watch...');\n    }\n  },\n  computed: {}\n});\nsetTimeout(function () {\n  app.info.age = 20;\n  app.wife = '王五';\n}, 2000);\nconsole.log(app);</script>\r\n</body>\r\n\r\n</html>"},"sourceMaps":null,"error":null,"hash":"bfc5040ce491810798597121c688fe9c","cacheData":{"env":{}}}